{"version":3,"sources":["Youtube.js","App.js","serviceWorker.js","index.js"],"names":["Youtube","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allVideos","currentState","getVideos","bind","assertThisInitialized","notify","event","_this2","preventDefault","LoadingBar","staticStart","id","refs","value","qty","linkUrl","concat","fetch","then","res","json","resjson","video","items","map","videoId","setState","catch","err","console","log","setTimeout","complete","toast","info","className","color","notFound","_this3","react_default","a","createElement","index_es","height","onRef","ref","Button","onClick","variant","class","react_toastify","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","Jumbotron","fluid","Form","Group","controlId","Label","Control","type","placeholder","Text","cur","i","key","title","width","src","frameBorder","allow","allowFullScreen","out","Component","App","src_Youtube","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUA2KeA,qBAhKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,GACXC,aAAc,IAEhBT,EAAKU,UAAYV,EAAKU,UAAUC,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IACjBA,EAAKa,OAASb,EAAKa,OAAOF,KAAZV,OAAAW,EAAA,EAAAX,CAAAD,IAPGA,yEASTc,GAAO,IAAAC,EAAAZ,KAEfW,EAAME,iBACNb,KAAKc,WAAWC,cAChB,IAAIC,EAAKhB,KAAKiB,KAAKD,GAAGE,MAClBC,EAAMnB,KAAKiB,KAAKE,IAAID,MAEpBE,EAAO,oDAAAC,OADG,0CACH,eAAAA,OAA4EL,EAA5E,2CAAAK,OAAwHF,GACnIG,MAAMF,GACHG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJ,IAAIC,EAAQD,EAAQE,MAAMC,IAAI,SAACD,GAAD,uCAAAP,OAA4CO,EAAMZ,GAAGc,WACnFlB,EAAKmB,SAAS,CACZ1B,UAAWsB,EACXrB,cAAc,MAEf0B,MAAM,SAAAC,GACPC,QAAQC,IAAIF,GACZrB,EAAKmB,SAAS,CACZzB,cAAc,MAGpB8B,WAAW,WACTxB,EAAKE,WAAWuB,YACf,sCAMHC,IAAMC,KAAK,0EAA2E,CAEpFC,UAAY,CACVC,MAAO,0CAQJ,IAEHC,EAFGC,EAAA3C,KAsBP,OAnBgC,IAA5BA,KAAKI,MAAME,aACboC,EAAYE,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGN,UAAU,iBADf,wBACsD,IACpDI,EAAAC,EAAAC,cAAA,KAAGN,UAAU,wBAKoB,IAA5BxC,KAAKI,MAAME,eACpBoC,EAAYE,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGN,UAAU,wBADf,yDAaFI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,OAAQ,EACRP,MAAM,UACNQ,MAAO,SAAAC,GAAG,OAAKP,EAAK7B,WAAaoC,KAGnCN,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,OAAKN,UAAU,YACbI,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,QAASpD,KAAKU,OAAQ2C,QAAQ,iBAAtC,qBAAwET,EAAAC,EAAAC,cAAA,KAAGQ,MAAM,6BAEnFV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACZC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAc,EACdC,KAAK,EACLC,yBAAuB,EACvBC,WAAW,EACXC,cAAY,KAIFpB,EAAAC,EAAAC,cAAA,OAAKN,UAAU,WACbI,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAWC,OAAK,GACdtB,EAAAC,EAAAC,cAAA,MAAIN,UAAU,OAAd,iDADF,IAKEI,EAAAC,EAAAC,cAAA,OAAKN,UAAU,WACbI,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,MAAN,mBACA1B,EAAAC,EAAAC,cAACqB,EAAA,EAAKI,QAAN,CACEC,KAAK,QACLC,YAAY,iCACZvB,IAAI,OAENN,EAAAC,EAAAC,cAACqB,EAAA,EAAKO,KAAN,CAAWlC,UAAU,cAArB,oFAMFI,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,MAAN,qBACA1B,EAAAC,EAAAC,cAACqB,EAAA,EAAKI,QAAN,CACEC,KAAK,SACLC,YAAY,WACZvB,IAAI,SAGRN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,QAASpD,KAAKO,UAAW8C,QAAQ,oBAAoBmB,KAAK,UAAlE,cAMP9B,EACA1C,KAAKI,MAAMC,UAAUwB,IAAI,SAAC8C,EAAKC,GAE9B,OADUhC,EAAAC,EAAAC,cAAA,UAAQ+B,IAAKD,EAAGE,MAAOF,EAAGG,MAAM,MAAM/B,OAAO,MAAMgC,IAAKL,EAAKM,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,MAIxLvC,EAAAC,EAAAC,cAAA,OAAKN,UAAU,QACZxC,KAAKoF,cAtJIC,cCWPC,mLATX,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,cANUF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7E,KAAK,SAAA8E,GACjCA,EAAaC","file":"static/js/main.f6bad4ef.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Jumbotron, Button, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport LoadingBar from 'react-top-loading-bar';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass Youtube extends Component {\r\n\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allVideos: [],\r\n      currentState: \"\"\r\n    };\r\n    this.getVideos = this.getVideos.bind(this);\r\n    this.notify = this.notify.bind(this);\r\n  }\r\n  getVideos(event) {\r\n\r\n    event.preventDefault();\r\n    this.LoadingBar.staticStart()\r\n    let id = this.refs.id.value;\r\n    let qty = this.refs.qty.value;\r\n    let api_Key = \"AIzaSyBdMMs_pVQRnmfTwnAVi0cmADbLrdYhBrs\";\r\n    let linkUrl = `https://www.googleapis.com/youtube/v3/search?key=${api_Key}&channelId=${id}&part=snippet,id&order=date&maxResults=${qty}`;\r\n    fetch(linkUrl)\r\n      .then(res => res.json())\r\n      .then(resjson => {\r\n        let video = resjson.items.map((items) => `https://www.youtube.com/embed/${items.id.videoId}`);\r\n        this.setState({\r\n          allVideos: video,\r\n          currentState: true\r\n        })\r\n      }).catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          currentState: false\r\n        })\r\n      });\r\n    setTimeout(() => {\r\n      this.LoadingBar.complete()\r\n    }, 3000);\r\n  }\r\n\r\n  notify() {\r\n\r\n\r\n    toast.info(\"Jay Shetty : UCbV60AGIHKz2xIGvbk0LLvg BeeBom : UCvpfclapgcuJo0M_x65pfRw\", {\r\n\r\n      className: ({\r\n        color: \"red\",\r\n\r\n      })\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let notFound;\r\n    if (this.state.currentState === true) {\r\n      notFound = (<div>\r\n        <h2>\r\n          <i className=\"fas fa-video\" /> Here the Videos are!{\" \"}\r\n          <i className=\"far fa-grin-wink\" />\r\n        </h2>\r\n\r\n      </div>\r\n      )\r\n    } else if (this.state.currentState === false) {\r\n      notFound = (<div>\r\n        <h2>\r\n          <i className=\"fas fa-heart-broken\" /> Oops! Check Channel id otherWise, No Videos Found!\r\n\r\n        </h2>\r\n      </div>)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n\r\n      <div>\r\n        <LoadingBar\r\n          height={3}\r\n          color=\"#f11946\"\r\n          onRef={ref => (this.LoadingBar = ref)}\r\n        />\r\n\r\n        <div>\r\n\r\n          <div>\r\n\r\n            <div className=\"toastNot\">\r\n              <Button onClick={this.notify} variant=\"outline-light\">Need Channel id's <i class=\"fas fa-question-circle\"></i></Button>\r\n            </div>\r\n            <ToastContainer\r\nposition=\"top-right\"\r\nautoClose={5000}\r\nhideProgressBar={false}\r\nnewestOnTop={false}\r\ncloseOnClick={false}\r\nrtl={false}\r\npauseOnVisibilityChange\r\ndraggable={false}\r\npauseOnHover\r\n/>\r\n\r\n          </div>\r\n          <div className=\"OverAll\">\r\n            <Jumbotron fluid>\r\n              <h1 className=\"App\">\r\n                Hola! Fetch the Youtube Videos by Channel ID!\r\n              </h1>\r\n              '\r\n              <div className=\"formsub\">\r\n                <Form>\r\n                  <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Channel ID</Form.Label>\r\n                    <Form.Control\r\n                      type=\"email\"\r\n                      placeholder=\"-E.g: UCXgGY0wkgOzynnHvSEVmE3A\"\r\n                      ref=\"id\"\r\n                    />\r\n                    <Form.Text className=\"text-muted\">\r\n                      Find Youtube Channel Id's @\r\n                      \"https://commentpicker.com/youtube-channel-id.php\"\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>No of Videos</Form.Label>\r\n                    <Form.Control\r\n                      type=\"Number\"\r\n                      placeholder=\"-E.g: 10\"\r\n                      ref=\"qty\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Button onClick={this.getVideos} variant=\"primary btn-block\" type=\"submit\">Submit</Button>\r\n                </Form>\r\n              </div>\r\n            </Jumbotron>\r\n          </div>\r\n\r\n          {notFound}\r\n          {this.state.allVideos.map((cur, i) => {\r\n            let out = <iframe  key={i} title={i} width=\"350\" height=\"204\" src={cur} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n            return out;\r\n          })\r\n          }\r\n          <div className=\"grid\">\r\n            {this.out}\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Youtube;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Youtube from \"./Youtube\";\n\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div>\n        <Youtube />\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}